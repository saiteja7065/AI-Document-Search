{"ast":null,"code":"import axios from 'axios';\n\n// Create an Axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000'\n});\n\n// Add a request interceptor to add auth token\napi.interceptors.request.use(config => {\n  // In a real app, get the token from storage\n  // For our mock auth demo, we'll use a dummy token\n  config.headers.Authorization = `Bearer demo_token`;\n  return config;\n}, error => Promise.reject(error));\n\n// Document APIs\nexport const uploadDocument = async (file, title) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('title', title);\n  const response = await api.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport const getDocuments = async () => {\n  const response = await api.get('/documents');\n  return response.data;\n};\nexport const getDocument = async id => {\n  const response = await api.get(`/documents/${id}`);\n  return response.data;\n};\nexport const deleteDocument = async id => {\n  const response = await api.delete(`/documents/${id}`);\n  return response.data;\n};\n\n// Search APIs\nexport const searchDocuments = async (query, options = {}) => {\n  const {\n    userId,\n    limit = 10,\n    filters = {}\n  } = options;\n  await simulateProcessingDelay(800, 2000); // Simulate search processing\n\n  // Get documents (all or user-specific)\n  const documents = userId ? await getUserDocuments(userId) : await getAllDocuments();\n  if (!query.trim()) {\n    return documents.slice(0, limit);\n  }\n\n  // Simple search algorithm: check if query appears in title or description\n  // In a real app, this would use vector embeddings and semantic search\n  const results = documents.map(doc => {\n    // Calculate a mock similarity score\n    const titleMatch = (doc.title || '').toLowerCase().includes(query.toLowerCase());\n    const descMatch = (doc.description || '').toLowerCase().includes(query.toLowerCase());\n    let similarityScore = 0;\n    if (titleMatch) similarityScore += 0.6;\n    if (descMatch) similarityScore += 0.4;\n\n    // Add some randomness for variety\n    similarityScore = Math.min(0.99, similarityScore + Math.random() * 0.3);\n\n    // Create a snippet with highlighted match\n    let snippet = doc.description || '';\n    if (snippet && query.length > 0) {\n      const lowerSnippet = snippet.toLowerCase();\n      const lowerQuery = query.toLowerCase();\n      const matchIndex = lowerSnippet.indexOf(lowerQuery);\n      if (matchIndex >= 0) {\n        // Extract context around the match\n        const start = Math.max(0, matchIndex - 40);\n        const end = Math.min(snippet.length, matchIndex + query.length + 40);\n        snippet = (start > 0 ? '...' : '') + snippet.slice(start, end) + (end < snippet.length ? '...' : '');\n      }\n    }\n    return {\n      document_id: doc.id,\n      title: doc.title,\n      file_type: doc.fileType,\n      similarity_score: similarityScore,\n      snippet: snippet || 'No preview available',\n      uploaded_at: doc.uploadedAt,\n      file_url: doc.fileUrl\n    };\n  }).filter(result => result.similarity_score > 0).sort((a, b) => b.similarity_score - a.similarity_score).slice(0, limit);\n  return results;\n};\n\n// Summary APIs\nexport const getDocumentSummary = async (documentId, summaryType = 'general', maxLength = 500) => {\n  // Longer processing time for summaries\n  await simulateProcessingDelay(1500, 3000);\n  const document = await getDocumentById(documentId);\n  if (!document) {\n    throw new Error('Document not found');\n  }\n\n  // Generate different mock summaries based on type\n  let summary = '';\n  const title = document.title;\n  const fileType = document.fileType;\n  switch (summaryType) {\n    case 'key_points':\n      summary = `Key points from \"${title}\":\\n\\n` + `• This ${fileType.toUpperCase()} document focuses on important business information.\\n` + `• It contains critical data that can be used for decision making.\\n` + `• The document was uploaded on ${new Date(document.uploadedAt).toLocaleDateString()}.\\n` + `• Several sections discuss strategies and implementation details.\\n` + `• Contains references to related documents and resources.`;\n      break;\n    case 'detailed':\n      summary = `Detailed Summary of \"${title}\"\\n\\n` + `This ${fileType.toUpperCase()} document (${(document.fileSize / (1024 * 1024)).toFixed(2)} MB) provides comprehensive information about the subject matter. ` + `The document begins with an introduction to the topic, followed by several sections that delve into specific aspects.\\n\\n` + `The first section outlines the background and context, establishing the foundation for understanding the subsequent content. ` + `Following this, the document presents detailed analysis of various factors and considerations relevant to the topic.\\n\\n` + `Notably, the document includes statistical data, charts, and references to external sources that support its claims and findings. ` + `The conclusion summarizes the key takeaways and suggests potential next steps or areas for further exploration.\\n\\n` + `This document would be particularly useful for stakeholders involved in decision-making processes related to the subject matter.`;\n      break;\n    default:\n      // general\n      summary = `Summary of \"${title}\"\\n\\n` + `This ${fileType.toUpperCase()} document provides information about ${title.toLowerCase().includes('report') ? 'reporting and analysis' : 'the specified topic'}. ` + `It contains approximately ${Math.round(document.fileSize / 1000)} KB of data uploaded on ${new Date(document.uploadedAt).toLocaleDateString()}. ` + `The document covers several important aspects related to the subject matter and presents information in a structured format. ` + `It would be beneficial to review the complete document for comprehensive understanding.`;\n  }\n\n  // Limit summary length if needed\n  if (maxLength > 0 && summary.length > maxLength) {\n    summary = summary.substring(0, maxLength) + '...';\n  }\n  return {\n    document_id: documentId,\n    title: document.title,\n    summary_type: summaryType,\n    summary,\n    generated_at: new Date().toISOString()\n  };\n};\n\n// Admin APIs\nexport const getAdminDocuments = async () => {\n  const response = await api.get('/admin/documents');\n  return response.data;\n};\n\n// Stats APIs\nexport const getStats = async () => {\n  const response = await api.get('/stats');\n  return response.data;\n};\n\n// Mock processing delay\nconst simulateProcessingDelay = async (minMs = 500, maxMs = 1500) => {\n  const delay = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;\n  await new Promise(resolve => setTimeout(resolve, delay));\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","headers","Authorization","error","Promise","reject","uploadDocument","file","title","formData","FormData","append","response","post","data","getDocuments","get","getDocument","id","deleteDocument","delete","searchDocuments","query","options","userId","limit","filters","simulateProcessingDelay","documents","getUserDocuments","getAllDocuments","trim","slice","results","map","doc","titleMatch","toLowerCase","includes","descMatch","description","similarityScore","Math","min","random","snippet","length","lowerSnippet","lowerQuery","matchIndex","indexOf","start","max","end","document_id","file_type","fileType","similarity_score","uploaded_at","uploadedAt","file_url","fileUrl","filter","result","sort","a","b","getDocumentSummary","documentId","summaryType","maxLength","document","getDocumentById","Error","summary","toUpperCase","Date","toLocaleDateString","fileSize","toFixed","round","substring","summary_type","generated_at","toISOString","getAdminDocuments","getStats","minMs","maxMs","delay","floor","resolve","setTimeout"],"sources":["E:/FULL STACK/AI Document Search/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an Axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n});\r\n\r\n// Add a request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // In a real app, get the token from storage\r\n    // For our mock auth demo, we'll use a dummy token\r\n    config.headers.Authorization = `Bearer demo_token`;\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Document APIs\r\nexport const uploadDocument = async (file, title) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('title', title);\r\n  \r\n  const response = await api.post('/upload', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n  \r\n  return response.data;\r\n};\r\n\r\nexport const getDocuments = async () => {\r\n  const response = await api.get('/documents');\r\n  return response.data;\r\n};\r\n\r\nexport const getDocument = async (id) => {\r\n  const response = await api.get(`/documents/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteDocument = async (id) => {\r\n  const response = await api.delete(`/documents/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Search APIs\r\nexport const searchDocuments = async (query, options = {}) => {\r\n  const { userId, limit = 10, filters = {} } = options;\r\n  \r\n  await simulateProcessingDelay(800, 2000); // Simulate search processing\r\n  \r\n  // Get documents (all or user-specific)\r\n  const documents = userId \r\n    ? await getUserDocuments(userId)\r\n    : await getAllDocuments();\r\n  \r\n  if (!query.trim()) {\r\n    return documents.slice(0, limit);\r\n  }\r\n  \r\n  // Simple search algorithm: check if query appears in title or description\r\n  // In a real app, this would use vector embeddings and semantic search\r\n  const results = documents\r\n    .map(doc => {\r\n      // Calculate a mock similarity score\r\n      const titleMatch = (doc.title || '').toLowerCase().includes(query.toLowerCase());\r\n      const descMatch = (doc.description || '').toLowerCase().includes(query.toLowerCase());\r\n      \r\n      let similarityScore = 0;\r\n      if (titleMatch) similarityScore += 0.6;\r\n      if (descMatch) similarityScore += 0.4;\r\n      \r\n      // Add some randomness for variety\r\n      similarityScore = Math.min(0.99, similarityScore + Math.random() * 0.3);\r\n      \r\n      // Create a snippet with highlighted match\r\n      let snippet = doc.description || '';\r\n      if (snippet && query.length > 0) {\r\n        const lowerSnippet = snippet.toLowerCase();\r\n        const lowerQuery = query.toLowerCase();\r\n        const matchIndex = lowerSnippet.indexOf(lowerQuery);\r\n        \r\n        if (matchIndex >= 0) {\r\n          // Extract context around the match\r\n          const start = Math.max(0, matchIndex - 40);\r\n          const end = Math.min(snippet.length, matchIndex + query.length + 40);\r\n          snippet = (start > 0 ? '...' : '') + \r\n                    snippet.slice(start, end) + \r\n                    (end < snippet.length ? '...' : '');\r\n        }\r\n      }\r\n      \r\n      return {\r\n        document_id: doc.id,\r\n        title: doc.title,\r\n        file_type: doc.fileType,\r\n        similarity_score: similarityScore,\r\n        snippet: snippet || 'No preview available',\r\n        uploaded_at: doc.uploadedAt,\r\n        file_url: doc.fileUrl\r\n      };\r\n    })\r\n    .filter(result => result.similarity_score > 0)\r\n    .sort((a, b) => b.similarity_score - a.similarity_score)\r\n    .slice(0, limit);\r\n  \r\n  return results;\r\n};\r\n\r\n// Summary APIs\r\nexport const getDocumentSummary = async (documentId, summaryType = 'general', maxLength = 500) => {\r\n  // Longer processing time for summaries\r\n  await simulateProcessingDelay(1500, 3000);\r\n  \r\n  const document = await getDocumentById(documentId);\r\n  if (!document) {\r\n    throw new Error('Document not found');\r\n  }\r\n  \r\n  // Generate different mock summaries based on type\r\n  let summary = '';\r\n  const title = document.title;\r\n  const fileType = document.fileType;\r\n  \r\n  switch (summaryType) {\r\n    case 'key_points':\r\n      summary = `Key points from \"${title}\":\\n\\n` +\r\n                `• This ${fileType.toUpperCase()} document focuses on important business information.\\n` +\r\n                `• It contains critical data that can be used for decision making.\\n` +\r\n                `• The document was uploaded on ${new Date(document.uploadedAt).toLocaleDateString()}.\\n` +\r\n                `• Several sections discuss strategies and implementation details.\\n` +\r\n                `• Contains references to related documents and resources.`;\r\n      break;\r\n    \r\n    case 'detailed':\r\n      summary = `Detailed Summary of \"${title}\"\\n\\n` +\r\n                `This ${fileType.toUpperCase()} document (${(document.fileSize / (1024 * 1024)).toFixed(2)} MB) provides comprehensive information about the subject matter. ` +\r\n                `The document begins with an introduction to the topic, followed by several sections that delve into specific aspects.\\n\\n` +\r\n                `The first section outlines the background and context, establishing the foundation for understanding the subsequent content. ` +\r\n                `Following this, the document presents detailed analysis of various factors and considerations relevant to the topic.\\n\\n` +\r\n                `Notably, the document includes statistical data, charts, and references to external sources that support its claims and findings. ` +\r\n                `The conclusion summarizes the key takeaways and suggests potential next steps or areas for further exploration.\\n\\n` +\r\n                `This document would be particularly useful for stakeholders involved in decision-making processes related to the subject matter.`;\r\n      break;\r\n    \r\n    default: // general\r\n      summary = `Summary of \"${title}\"\\n\\n` +\r\n                `This ${fileType.toUpperCase()} document provides information about ${title.toLowerCase().includes('report') ? 'reporting and analysis' : 'the specified topic'}. ` +\r\n                `It contains approximately ${Math.round(document.fileSize / 1000)} KB of data uploaded on ${new Date(document.uploadedAt).toLocaleDateString()}. ` +\r\n                `The document covers several important aspects related to the subject matter and presents information in a structured format. ` +\r\n                `It would be beneficial to review the complete document for comprehensive understanding.`;\r\n  }\r\n  \r\n  // Limit summary length if needed\r\n  if (maxLength > 0 && summary.length > maxLength) {\r\n    summary = summary.substring(0, maxLength) + '...';\r\n  }\r\n  \r\n  return {\r\n    document_id: documentId,\r\n    title: document.title,\r\n    summary_type: summaryType,\r\n    summary,\r\n    generated_at: new Date().toISOString()\r\n  };\r\n};\r\n\r\n// Admin APIs\r\nexport const getAdminDocuments = async () => {\r\n  const response = await api.get('/admin/documents');\r\n  return response.data;\r\n};\r\n\r\n// Stats APIs\r\nexport const getStats = async () => {\r\n  const response = await api.get('/stats');\r\n  return response.data;\r\n};\r\n\r\n// Mock processing delay\r\nconst simulateProcessingDelay = async (minMs = 500, maxMs = 1500) => {\r\n  const delay = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;\r\n  await new Promise(resolve => setTimeout(resolve, delay));\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}