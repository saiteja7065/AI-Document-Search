{"ast":null,"code":"// Real API service for document search and related operations\nimport axios from 'axios';\nimport { addTagsToDocument, removeTagFromDocument, getDocumentTags, createTag as storageCreateTag, getAllTags } from './storageService';\n\n// Get API configuration from environment variables\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst API_VERSION = process.env.REACT_APP_API_VERSION || 'v1';\nconst BASE_URL = `${API_URL}`;\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add authentication token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Fallback to mock implementation if backend request fails\nconst withFallback = async (apiCall, mockFunction, ...args) => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.warn('API call failed, using mock data:', error);\n    return mockFunction(...args);\n  }\n};\n\n/**\r\n * Delete a document\r\n * @param {string} documentId - Document ID to delete\r\n * @returns {Promise<boolean>} - Success status\r\n */\nexport const deleteDocument = async documentId => {\n  try {\n    await api.delete(`/documents/${documentId}`);\n    return true;\n  } catch (error) {\n    console.error('Error deleting document:', error);\n    return false;\n  }\n};\n\n/**\r\n * Get documents for admin\r\n * @returns {Promise<Array>} - List of all documents with user info\r\n */\nexport const getAdminDocuments = async () => {\n  try {\n    const response = await api.get('/admin/documents');\n    return response.data;\n  } catch (error) {\n    console.error('Error getting admin documents:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get system stats for admin dashboard\r\n * @returns {Promise<Object>} - System statistics\r\n */\nexport const getStats = async () => {\n  try {\n    const response = await api.get('/stats');\n    return response.data;\n  } catch (error) {\n    console.error('Error getting stats:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Search documents based on query\r\n * @param {string} query - The search query\r\n * @param {Object} options - Search options \r\n * @returns {Promise<Array>} - List of matching documents with relevance scores\r\n */\nexport const searchDocuments = async (query, options = {}) => {\n  const {\n    limit = 10\n  } = options;\n  try {\n    const response = await api.post('/search', {\n      query,\n      limit\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error searching documents:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get a document by ID\r\n * @param {string} documentId - The document ID\r\n * @returns {Promise<Object>} - Document object\r\n */\nexport const getDocument = async documentId => {\n  try {\n    const response = await api.get(`/documents/${documentId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting document:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Generate a summary of a document\r\n * @param {string} documentId - The document ID\r\n * @param {string} summaryType - Type of summary (general, key_points, detailed)\r\n * @param {number} maxLength - Maximum summary length\r\n * @returns {Promise<Object>} - Summary object\r\n */\nexport const getDocumentSummary = async (documentId, summaryType = 'general', maxLength = 500) => {\n  try {\n    const response = await api.get(`/documents/${documentId}/summary`, {\n      params: {\n        summary_type: summaryType,\n        max_tokens: maxLength\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting document summary:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Ask a question about a document\r\n * @param {string} documentId - The document ID\r\n * @param {string} question - The question to ask\r\n * @returns {Promise<Object>} - Answer object\r\n */\nexport const askDocumentQuestion = async (documentId, question) => {\n  try {\n    const response = await api.post(`/documents/${documentId}/ask`, {\n      question\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error asking document question:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get related documents\r\n * @param {string} documentId - The document ID\r\n * @param {number} limit - Maximum number of related documents\r\n * @returns {Promise<Array>} - List of related documents\r\n */\nexport const getRelatedDocuments = async (documentId, limit = 3) => {\n  try {\n    const response = await api.get(`/documents/${documentId}/related`, {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting related documents:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get user activity\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} - List of user activities\r\n */\nexport const getUserActivity = async userId => {\n  try {\n    const response = await api.get(`/users/${userId}/activity`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting user activity:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Upload a document\r\n * @param {File} file - The file to upload\r\n * @param {string} title - Document title\r\n * @param {Function} progressCallback - Callback for upload progress\r\n * @returns {Promise<Object>} - Uploaded document metadata\r\n */\nexport const uploadDocument = async (file, title, progressCallback = () => {}) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('title', title);\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        progressCallback(percentCompleted);\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error uploading document:', error);\n    throw error;\n  }\n};\n\n// The following functions still use the mock implementation\n// They will be updated in the future when backend endpoints are available\n\n/**\r\n * Get all available tags\r\n * @returns {Promise<Array>} - List of tags\r\n */\nexport const getTags = async () => {\n  return getAllTags();\n};\n\n/**\r\n * Create a new tag\r\n * @param {string} name - Tag name\r\n * @param {string} color - Tag color\r\n * @returns {Promise<Object>} - Created tag\r\n */\nexport const createTag = async (name, color) => {\n  return storageCreateTag(name, color);\n};\n\n/**\r\n * Get tags for a specific document\r\n * @param {string} documentId - Document ID\r\n * @returns {Promise<Array>} - List of tags for the document\r\n */\nexport const getDocumentTagsByDocId = async documentId => {\n  return getDocumentTags(documentId);\n};\n\n/**\r\n * Add tags to a document\r\n * @param {string} documentId - Document ID\r\n * @param {Array} tagIds - List of tag IDs\r\n * @returns {Promise<boolean>} - Success status\r\n */\nexport const addTagsToDoc = async (documentId, tagIds) => {\n  return addTagsToDocument(documentId, tagIds);\n};\n\n/**\r\n * Remove a tag from a document\r\n * @param {string} documentId - Document ID\r\n * @param {string} tagId - Tag ID\r\n * @returns {Promise<boolean>} - Success status\r\n */\nexport const removeTagFromDoc = async (documentId, tagId) => {\n  return removeTagFromDocument(documentId, tagId);\n};\n\n/**\r\n * Search documents by tag\r\n * @param {string} tagId - Tag ID\r\n * @returns {Promise<Array>} - List of documents with the tag\r\n */\nexport const searchDocumentsByTag = async tagId => {\n  try {\n    const response = await api.get(`/tags/${tagId}/documents`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching documents by tag:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Enhanced document summary with different approaches\r\n * @param {string} documentId - The document ID\r\n * @param {Object} options - Summary options\r\n * @returns {Promise<Object>} - Enhanced summary result\r\n */\nexport const getEnhancedDocumentSummary = async (documentId, options = {}) => {\n  try {\n    const response = await api.get(`/documents/${documentId}/enhanced-summary`, {\n      params: options\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting enhanced document summary:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get document insights\r\n * @param {string} documentId - The document ID\r\n * @returns {Promise<Object>} - Document insights\r\n */\nexport const getDocumentInsights = async documentId => {\n  try {\n    const response = await api.get(`/documents/${documentId}/insights`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting document insights:', error);\n    throw error;\n  }\n};\nexport default {\n  searchDocuments,\n  getDocument,\n  getDocumentSummary,\n  askDocumentQuestion,\n  getRelatedDocuments,\n  getUserActivity,\n  deleteDocument,\n  getAdminDocuments,\n  getStats,\n  getTags,\n  createTag,\n  getDocumentTagsByDocId,\n  addTagsToDoc,\n  removeTagFromDoc,\n  searchDocumentsByTag,\n  getEnhancedDocumentSummary,\n  getDocumentInsights\n};","map":{"version":3,"names":["axios","addTagsToDocument","removeTagFromDocument","getDocumentTags","createTag","storageCreateTag","getAllTags","API_URL","process","env","REACT_APP_API_URL","API_VERSION","REACT_APP_API_VERSION","BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","withFallback","apiCall","mockFunction","args","console","warn","deleteDocument","documentId","delete","getAdminDocuments","response","get","data","getStats","searchDocuments","query","options","limit","post","getDocument","getDocumentSummary","summaryType","maxLength","params","summary_type","max_tokens","askDocumentQuestion","question","getRelatedDocuments","getUserActivity","userId","uploadDocument","file","title","progressCallback","formData","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","getTags","name","color","getDocumentTagsByDocId","addTagsToDoc","tagIds","removeTagFromDoc","tagId","searchDocumentsByTag","getEnhancedDocumentSummary","getDocumentInsights"],"sources":["E:/FULL STACK/AI Document Search/frontend/src/services/api.js"],"sourcesContent":["// Real API service for document search and related operations\r\nimport axios from 'axios';\r\nimport { addTagsToDocument, removeTagFromDocument, getDocumentTags, createTag as storageCreateTag, getAllTags } from './storageService';\r\n\r\n// Get API configuration from environment variables\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\nconst API_VERSION = process.env.REACT_APP_API_VERSION || 'v1';\r\nconst BASE_URL = `${API_URL}`;\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Add authentication token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('auth_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Fallback to mock implementation if backend request fails\r\nconst withFallback = async (apiCall, mockFunction, ...args) => {\r\n  try {\r\n    return await apiCall();\r\n  } catch (error) {\r\n    console.warn('API call failed, using mock data:', error);\r\n    return mockFunction(...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a document\r\n * @param {string} documentId - Document ID to delete\r\n * @returns {Promise<boolean>} - Success status\r\n */\r\nexport const deleteDocument = async (documentId) => {\r\n  try {\r\n    await api.delete(`/documents/${documentId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting document:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get documents for admin\r\n * @returns {Promise<Array>} - List of all documents with user info\r\n */\r\nexport const getAdminDocuments = async () => {\r\n  try {\r\n    const response = await api.get('/admin/documents');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting admin documents:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get system stats for admin dashboard\r\n * @returns {Promise<Object>} - System statistics\r\n */\r\nexport const getStats = async () => {\r\n  try {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting stats:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Search documents based on query\r\n * @param {string} query - The search query\r\n * @param {Object} options - Search options \r\n * @returns {Promise<Array>} - List of matching documents with relevance scores\r\n */\r\nexport const searchDocuments = async (query, options = {}) => {\r\n  const { limit = 10 } = options;\r\n  \r\n  try {\r\n    const response = await api.post('/search', { \r\n      query, \r\n      limit \r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching documents:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a document by ID\r\n * @param {string} documentId - The document ID\r\n * @returns {Promise<Object>} - Document object\r\n */\r\nexport const getDocument = async (documentId) => {\r\n  try {\r\n    const response = await api.get(`/documents/${documentId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting document:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Generate a summary of a document\r\n * @param {string} documentId - The document ID\r\n * @param {string} summaryType - Type of summary (general, key_points, detailed)\r\n * @param {number} maxLength - Maximum summary length\r\n * @returns {Promise<Object>} - Summary object\r\n */\r\nexport const getDocumentSummary = async (documentId, summaryType = 'general', maxLength = 500) => {\r\n  try {\r\n    const response = await api.get(`/documents/${documentId}/summary`, {\r\n      params: {\r\n        summary_type: summaryType,\r\n        max_tokens: maxLength\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting document summary:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Ask a question about a document\r\n * @param {string} documentId - The document ID\r\n * @param {string} question - The question to ask\r\n * @returns {Promise<Object>} - Answer object\r\n */\r\nexport const askDocumentQuestion = async (documentId, question) => {\r\n  try {\r\n    const response = await api.post(`/documents/${documentId}/ask`, {\r\n      question\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error asking document question:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get related documents\r\n * @param {string} documentId - The document ID\r\n * @param {number} limit - Maximum number of related documents\r\n * @returns {Promise<Array>} - List of related documents\r\n */\r\nexport const getRelatedDocuments = async (documentId, limit = 3) => {\r\n  try {\r\n    const response = await api.get(`/documents/${documentId}/related`, {\r\n      params: { limit }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting related documents:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get user activity\r\n * @param {string} userId - User ID\r\n * @returns {Promise<Array>} - List of user activities\r\n */\r\nexport const getUserActivity = async (userId) => {\r\n  try {\r\n    const response = await api.get(`/users/${userId}/activity`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting user activity:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Upload a document\r\n * @param {File} file - The file to upload\r\n * @param {string} title - Document title\r\n * @param {Function} progressCallback - Callback for upload progress\r\n * @returns {Promise<Object>} - Uploaded document metadata\r\n */\r\nexport const uploadDocument = async (file, title, progressCallback = () => {}) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('title', title);\r\n    \r\n    const response = await api.post('/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n      onUploadProgress: (progressEvent) => {\r\n        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n        progressCallback(percentCompleted);\r\n      },\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error uploading document:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// The following functions still use the mock implementation\r\n// They will be updated in the future when backend endpoints are available\r\n\r\n/**\r\n * Get all available tags\r\n * @returns {Promise<Array>} - List of tags\r\n */\r\nexport const getTags = async () => {\r\n  return getAllTags();\r\n};\r\n\r\n/**\r\n * Create a new tag\r\n * @param {string} name - Tag name\r\n * @param {string} color - Tag color\r\n * @returns {Promise<Object>} - Created tag\r\n */\r\nexport const createTag = async (name, color) => {\r\n  return storageCreateTag(name, color);\r\n};\r\n\r\n/**\r\n * Get tags for a specific document\r\n * @param {string} documentId - Document ID\r\n * @returns {Promise<Array>} - List of tags for the document\r\n */\r\nexport const getDocumentTagsByDocId = async (documentId) => {\r\n  return getDocumentTags(documentId);\r\n};\r\n\r\n/**\r\n * Add tags to a document\r\n * @param {string} documentId - Document ID\r\n * @param {Array} tagIds - List of tag IDs\r\n * @returns {Promise<boolean>} - Success status\r\n */\r\nexport const addTagsToDoc = async (documentId, tagIds) => {\r\n  return addTagsToDocument(documentId, tagIds);\r\n};\r\n\r\n/**\r\n * Remove a tag from a document\r\n * @param {string} documentId - Document ID\r\n * @param {string} tagId - Tag ID\r\n * @returns {Promise<boolean>} - Success status\r\n */\r\nexport const removeTagFromDoc = async (documentId, tagId) => {\r\n  return removeTagFromDocument(documentId, tagId);\r\n};\r\n\r\n/**\r\n * Search documents by tag\r\n * @param {string} tagId - Tag ID\r\n * @returns {Promise<Array>} - List of documents with the tag\r\n */\r\nexport const searchDocumentsByTag = async (tagId) => {\r\n  try {\r\n    const response = await api.get(`/tags/${tagId}/documents`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching documents by tag:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Enhanced document summary with different approaches\r\n * @param {string} documentId - The document ID\r\n * @param {Object} options - Summary options\r\n * @returns {Promise<Object>} - Enhanced summary result\r\n */\r\nexport const getEnhancedDocumentSummary = async (documentId, options = {}) => {\r\n  try {\r\n    const response = await api.get(`/documents/${documentId}/enhanced-summary`, {\r\n      params: options\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting enhanced document summary:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get document insights\r\n * @param {string} documentId - The document ID\r\n * @returns {Promise<Object>} - Document insights\r\n */\r\nexport const getDocumentInsights = async (documentId) => {\r\n  try {\r\n    const response = await api.get(`/documents/${documentId}/insights`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error getting document insights:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  searchDocuments,\r\n  getDocument,\r\n  getDocumentSummary,\r\n  askDocumentQuestion,\r\n  getRelatedDocuments,\r\n  getUserActivity,\r\n  deleteDocument,\r\n  getAdminDocuments,\r\n  getStats,\r\n  getTags,\r\n  createTag,\r\n  getDocumentTagsByDocId,\r\n  addTagsToDoc,\r\n  removeTagFromDoc,\r\n  searchDocumentsByTag,\r\n  getEnhancedDocumentSummary,\r\n  getDocumentInsights\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}